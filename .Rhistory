}
bics[i,]<-getbic(tempdata)
}
bics<-as.data.frame(bics)
names(bics)<-c("bic.con","bic.add")
#' reshape and plot density
bics.long <- reshape(bics, varying=c("bic.con","bic.add"), timevar="model", direction="long")
G <- ggplot() + geom_density(data=bics.long, aes(x=bic,y=..count..,fill=model,alpha=0.5)) +
ggtitle(paste(niters, " iterations", collapse=""))
G
#' look at it with just 1000 permutations (just for fun)
bics.short<-bics[1:1000,]
dim(bics.short)
bics.short.long <-reshape(bics.short, varying=c("bic.con","bic.add"), timevar="model", direction="long")
Gshort <- ggplot() + geom_density(data=bics.short.long, aes(x=bic,y=..count..,fill=model,alpha=0.5)) +
ggtitle("1000 iterations")
Gshort
#' get descriptive stats
summary(bics)
bic.diff <- bics$bic.con - bics$bic.add
summary(bic.diff)
bic.ci <- data.frame(c(sort(bics$bic.diff)[niters*.025],sort(bics$bic.diff)[niters*.975])))
names(bic.ci) <- c("lower","upper")
bic.ci
bic.ci <- data.frame(c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])))
names(bic.ci) <- c("lower","upper")
bic.ci
sort(bic.diff)
sort(bic.diff)[1]
sort(bic.diff)[100000]
sort(bic.diff)[10000]
niters
niters*0.025
sort(bic.diff)[niters*.025]
as.data.frame(c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])))
bic.ci <- as.data.frame(c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975]))
bic.ci
sort(bic.diff)[niters*.95]
bic.ci <- c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])
bic.ci
save.image("~/CogCon/bootstrap_workspace.RData")
as.data.frame(bic.ci)
as.data.frame(c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975]))
bic.diff <- bics$bic.con - bics$bic.add
summary(bic.diff)
bic.ci <- c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])
bic.ci <- as.data.frame(bic.ci)
row.names(bic.ci) <- c("lower","upper")
bic.ci
bic.short.diff <- bics.short$bic.con - bics.short$bic.add
summary(bic.short.diff)
bic.short.ci <- c(sort(bic.short.diff)[1000*.025],sort(bic.short.diff)[1000*.975])
bic.short.ci <- as.data.frame(bic.short.ci)
row.names(bic.short.ci) <- c("lower","upper")
bic.short.ci
sum(bic.diff<0)
sum(bic.diff>0)
sum(bic.diff<0)
sum(bic.diff<0)/niters
summary(bic.diff)
head(bic.diff)
ggplot() + geom_density(aes(x=bic.diff, y=..count..))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill=1))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill=10))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill=.5))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., colours='red'))
>aes
?aes
?colour
ggplot() + geom_density(aes(x=bic.diff, y=..count.., colour='red'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='red'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='pink'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='grey'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='gray'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='green'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='blue'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='black'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='white'))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='white', colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill='white', colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill="white", colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill="", colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill=1, colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill="white", colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill=[255 255 255], colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill="dark grey", colour="red"))
ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="dark grey", colour="red")
ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="dark grey", colour="red", alpha=.5)
ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="green", alpha=.5)
ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="green", colour="green",alpha=.5)
bics.short.long <-reshape(bics.short, varying=c("bic.con","bic.add"), timevar="model", direction="long")
Gshort <- ggplot() + geom_density(data=bics.short.long, aes(x=bic,y=..count..,fill=model) alpha=0.5) +
ggtitle("1000 iterations")
Gshort
Gshort <- ggplot() + geom_density(data=bics.short.long, aes(x=bic,y=..count..) fill=model, alpha=0.5) +
ggtitle("1000 iterations")
Gshort
Gshort <- ggplot() + geom_density(data=bics.short.long, aes(x=bic,y=..count..) fill=model, alpha=0.5) +
ggtitle("1000 iterations")
Gshort
Gshort <- ggplot() + geom_density(data=bics.short.long, aes(x=bic,y=..count.., fill=model), alpha=0.5) +
ggtitle("1000 iterations")
Gshort
bics.short.long <-reshape(bics.short, varying=c("bic.con","bic.add"), timevar="model", direction="long")
Gshort <- ggplot() + geom_density(data=bics.short.long, aes(x=bic,y=..count.., fill=model, colour=model), alpha=0.5) +
ggtitle("1000 iterations")
Gshort
bics.long <- reshape(bics, varying=c("bic.con","bic.add"), timevar="model", direction="long")
G <- ggplot() + geom_density(data=bics.long, aes(x=bic,y=..count..,fill=model, colour=model) ,alpha=0.5) +
ggtitle(paste(niters, " iterations", collapse=""))
G
Gdiff <- ggplot() + geom_density(aes(x=bic.diff, y=..count.., fill="green", colour="green"), alpha=.5) +
ggtitle("BIC difference across models (10,000 iterations)")
Gdiff
Gdiff <- ggplot() + geom_density(aes(x=bic.diff, y=..count..) fill="green", colour="green", alpha=.5) +
ggtitle("BIC difference across models (10,000 iterations)")
Gdiff
Gdiff <- ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="green", colour="green", alpha=.5) +
ggtitle("BIC difference across models (10,000 iterations)")
Gdiff
Gdiff <- ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="green", colour="green", alpha=.5) +
ggtitle("BIC difference (con - add) across models (10,000 iterations)")
Gdiff
bic.short.ci
#' calculate 95% confidence interval on the difference in BIC
bic.diff <- bics$bic.con - bics$bic.add
summary(bic.diff)
bic.ci <- c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])
bic.ci <- as.data.frame(bic.ci)
row.names(bic.ci) <- c("lower","upper")
bic.ci
# #' do it on 1000 permutations (just for fun)
# #' calculate 95% confidence interval on the difference in BIC
# bic.short.diff <- bics.short$bic.con - bics.short$bic.add
# summary(bic.short.diff)
# bic.short.ci <- c(sort(bic.short.diff)[1000*.025],sort(bic.short.diff)[1000*.975])
# bic.short.ci <- as.data.frame(bic.short.ci)
# row.names(bic.short.ci) <- c("lower","upper")
# bic.short.ci
#' what proportion of the permutations have a negative difference???
sum(bic.diff<0)/niters
#' plot BIC difference distribution
Gdiff <- ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="green", colour="green", alpha=.5) +
ggtitle("BIC difference (con - add) across models (10,000 iterations)")
Gdiff
data.aHipPRC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="PHC_Ant")
data.aHipPRC$ROI < factor(data.aHipPRC$ROI)
summary(data.aHipPRC)
anova.aHipPRC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPRC)
summary(anova.aHipPRC)
data.aHipPRC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="PHC_Ant")
data.aHipPRC$ROI < factor(data.aHipPRC$ROI)
summary(data.aHipPRC)
anova.aHipPRC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPRC)
summary(anova.aHipPRC)
data.aHipPRC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="PHC_Ant")
data.aHipPRC$ROI <- factor(data.aHipPRC$ROI)
summary(data.aHipPRC)
anova.aHipPRC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPRC)
summary(anova.aHipPRC)
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anova.L <- aov(Sim ~ Sort*Hem + Error(Subj/(Sort*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas2, function(x) summary(x,split=list(Sort=b)))
}
names(L) <- con[2:5]
L
cm.raw <- rbind("dead"=c(1,1,1,1),
"con>diff"=c(-1,1,0,0),
"objcon>obj"=c(0,0,1,-1),
"obj>diff"=c(-1,0,0,1),
"objcon>obj+con"=c(0,-1,2,-1))
con <- rownames(cm.raw)
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anova.L <- aov(Sim ~ Sort*Hem + Error(Subj/(Sort*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas2, function(x) summary(x,split=list(Sort=b)))
}
names(L) <- con[2:5]
L
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anovas.L <- aov(Sim ~ Sort*Hem + Error(Subj/(Sort*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas.L, function(x) summary(x,split=list(Sort=b)))
}
names(L) <- con[2:5]
L
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anovas.L <- aov(Sim ~ Sort*Hem + Error(Subj/(Sort*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas.L, function(x) summary(x,split=list(Sort=b)))
}
names(L) <- con[2:5]
L
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anovas.L <- aov(Sim ~ Sort*Hem + Error(Subj/(Sort*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas.L, function(x) summary(x,split=list(Sort:ROI=b)))
}
names(L) <- con[2:5]
L
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anovas.L <- aov(Sim ~ Sort*Hem + Error(Subj/(Sort*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas.L, function(x) summary(x,split=list(Sort=b)))
}
names(L) <- con[2:5]
L
b
i
con(i)
con
con[i]
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anovas.L <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas.L, function(x) summary(x,split=list(Sort=b)))
}
names(L) <- con[2:5]
L
L <- list()
for (i in 2:length(con)) {
contrasts(data.aHipPRC$Sort)<-t(cm.raw[i,,drop=FALSE])
anovas.L <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)),data=data.aHipPRC)
b <- list(1) ; names(b)=con[i]
L[[i-1]] <- lapply(anovas.L, function(x) summary(x,split=list(Sort=b)))
}
names(L) <- con[2:5]
L
summary(data.aHipPRC)
data.paper <- subset(data, ROI == "PRC" & ROI == "PHC_Ant" & ROI =="Hipp_Head")
data.paper$ROI <- factor(data.paper$ROI)
summary(data.paper)
data.paper <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail")
data.paper$ROI <- factor(data.paper$ROI)
summary(data.paper)
# aHip vs PRC
data.aHipPRC <- subset(data, subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="PHC_Ant")
data.aHipPRC$ROI <- factor(data.aHipPRC$ROI)
summary(data.aHipPRC)
anova.aHipPRC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPRC)
summary(anova.aHipPRC)
# aHip vs PHC
data.aHipPHC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="PRC")
data.aHipPHC$ROI <- factor(data.aHipPHC$ROI)
summary(data.aHipPHC)
anova.aHipPHC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPHC)
summary(anova.aHipPHC)
# PRC vs PHC
data.aHipPHC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="Hipp_Head")
data.PRCPHC$ROI <- factor(data.PRCPHC$ROI)
summary(data.PRCPHC)
anova.PRCPHC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.PRCPHC)
summary(anova.PRCPHC)
# aHip vs PRC
data.aHipPRC <- subset(data, subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="PHC_Ant")
data.aHipPRC$ROI <- factor(data.aHipPRC$ROI)
summary(data.aHipPRC)
anova.aHipPRC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPRC)
summary(anova.aHipPRC)
# aHip vs PHC
data.aHipPHC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="PRC")
data.aHipPHC$ROI <- factor(data.aHipPHC$ROI)
summary(data.aHipPHC)
anova.aHipPHC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPHC)
summary(anova.aHipPHC)
# PRC vs PHC
data.PRCPHC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="Hipp_Head")
data.PRCPHC$ROI <- factor(data.PRCPHC$ROI)
summary(data.PRCPHC)
anova.PRCPHC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.PRCPHC)
summary(anova.PRCPHC)
# aHip vs PRC
data.aHipPRC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="PHC_Ant")
data.aHipPRC$ROI <- factor(data.aHipPRC$ROI)
summary(data.aHipPRC)
anova.aHipPRC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPRC)
summary(anova.aHipPRC)
# aHip vs PHC
data.aHipPHC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="PRC")
data.aHipPHC$ROI <- factor(data.aHipPHC$ROI)
summary(data.aHipPHC)
anova.aHipPHC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.aHipPHC)
summary(anova.aHipPHC)
# PRC vs PHC
data.PRCPHC <- subset(data, ROI != "Amyg" & ROI != "ERC" & ROI !="PHC_Post" & ROI !="Hipp_Body" & ROI !="Hipp_Tail" & ROI !="Hipp_Head")
data.PRCPHC$ROI <- factor(data.PRCPHC$ROI)
summary(data.PRCPHC)
anova.PRCPHC <- aov(Sim ~ Sort*ROI*Hem + Error(Subj/(Sort*ROI*Hem)), data=data.PRCPHC)
summary(anova.PRCPHC)
q()
?vapply
require(gtools)
q()
install.packages(aod)
install.packages("aod")
install.packages("Rcpp")
?glm
source(glm)
?source
source("glm")
which("glm")
which(glm)
help(source)
source("glm.R")
source(cbind)
source("cbind")
source("cbind.R")
showMethods(glm)
glm
?match.call
install.packages("devtools")
require("devtools")
devtools::install_github("klutometis/roxygen")
require(roxygen2)
require(roxygen)
devtools::install_github("klutometis/roxygen")
require(roxygen)
require(roxygen2)
install.packages("roxygen2")
require(roxygen2)
install.packages("tidyr")
?gather
require(tidyr)
?gather
q()
require(ddply)
require(dplyr)
reqire(tidyr)
require(tidyr)
version()
R.version()
R.Version()()
R.Version()
require(tidyr)
getwd()
ls("*.R")
ls()
dir()
dir("R")
dir("R/win-library/3.1/acepack/")
?ddply
require(dplyr)
?dplyr
?filter
?dplyr:filter
?dplyr::filter
?tidyr
?tidy
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
R.Version()
require(installr)
updateR()
updateR()
file.edit('newscript.R')
source('C:/Users/Laura Libby/Dropbox/Uber/uberdemo2.R')
getwd()
setwd('../Dropbox/Uber/')
ls
dir
dir()
file.copy('uberdemo2.R','C:\Users\Laura Libby\Documents\R\win-library\3.3\libbyr/tempscript.R')
file.copy('uberdemo2.R','//C:/Users/Laura Libby/Documents/R/win-library/3.3/libbyr/tempscript.R')
getwd()
file.copy('uberdemo2.R','C:/Users/Laura Libby/Documents/R/win-library/3.3/libbyr/tempscript.R')
dir('C:/Users/Laura Libby/Documents/R/win-library/3.3/libbyr/')
require(libbyr)
require(libbyr)
file.edit('C:/Users/Laura Libby/Documents/R/win-library/3.3/libbyr/tempscript.R')
?gsub
date()
require(devtools)
install.packages("devtools")
require(devtools)
pwd
getwd()
setwd('C:/Users/Laura Libby/Documents/R/win-library/3.3/')
create('libbyr')
dir
dir()
require(libbyr)
setwd('C:/Users/Laura Libby/Documents/R/win-library/3.3/libbyr/R')
dir()
file.edit('newscript.R')
?paste
getwd(0)
getwd()
setwd('..')
getwd()
document()
document()
dir()
file.edit("DESCRIPTION")
document()
file.edit("NAMESPACE")
require(roxygen2)
document()
?roxygenise
?namespace_roclet
?vignette_roclet
?document
document()
dir()
dir.create("data")
?file.copy
document()
file.edit("NAMESPACE")
getwd()
setwd('..')
install("libbyr")
dir()
dir("libbyr")
create("libbyr")
setwd("libbyr/")
document()
setwd("..")
install("libbyr")
setwd("C:/Users/Laura Libby/Documents/GitHub/r-sweetness")
warnings()
getsd()
getwd()
create("libbyr")
setwd("libbyr")
document()
setwd("..")
install("libbyr")
file.edit("C:/Program Files/R/R-3.3.1/etc/Rprofile.site")
pwd
getwd()
setwd('../../..')
getwd()
setwd('Documents/')
?newscript
newscript("test.R","Test script")
setwd("C:/Users/Laura Libby/Documents/GitHub/r-sweetness/libbyr/")
dir.create("data")
setwd("data")
getwd()
dir()
find.package("libbyr")
find.package(libbyr)
newscript("test.R","Test script")
dir()
setwd("../../../../")
newscript("test.R","Test script")
temppath <- find.package("libbyr")
filepath <- "test.R"
file.copy(paste(temppath,'/data/tempscript.R'),filepath)
dir()
ls()
paste(temppath,'/data/tempscript.R')
temppath
paste0(temppath,'/data/tempscript.R')
newscript("test.R","Test script")
file.copy(paste0(temppath,'/data/tempscript.R'),filepath)
paste0(temppath,'/data/tempscript.R')
dir(paste0(temppath,'/data/tempscript.R'))
setwd("C:/Users/Laura Libby/Documents/GitHub/r-sweetness")
install("libbyr")
setwd("libbyr")
document()
setwd("..")
install("libbyr")
require(libbyr)
libbyrdir <- getwd()
setwd('C:/Users/Laura Libby/Documents')
?newscript
newscript('tempfile.R','Fake title')
require(libbyr)
?{libbyr}
?libbyr
??libbyr
getwd()
require(libbyr)
remove.packages("libbyr")
setwd('GitHub/r-sweetness/libbyr/')
document()
setwd("..")
install("libbyr")
require(libbyr)
?newscript
find.package("libbyr")
install("libbyr")
remove.packages("libbyr")
dir()
setwd("libbyr/man/")
dir()
file.edit("newscript.Rd")
setwd("../..")
install("libbyr")
dir()
setwd("libbyr")
document()
setwd("..")
install("libbyr")
q()
