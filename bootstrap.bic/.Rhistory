getwd()
?require
niters=1000
#' ---
#' title: "Model Fit Compare Bootstrap Analysis for CogCon fMRI Pattern Similarity Project"
#' author: "[Laura A Libby](lauraannelibby.github.io)"
#' date: "April 6, 2016"
#' output:html_document:
#'   toc: true
#'   toc_float: true
#' ---
#' This script compares additive (linear) versus conjunctive (threshold) coding models using Bayesian
#' Information  Criterion (BIC), determining whether model fit difference is reliable based on a
#' Bootstrap analysis.
#' ## Initialize settings
#' ### **Important:** Set number of iterations
niters=1000
#' ### Load packages
```
{r message=FALSE}
require(car)
require(lme4)
require(gtools)
require(ggplot2)
```
#' ### Input data
datafilename="C:/Users/Laura Libby/Dropbox/CogCon/meansim_ROIs_factors.txt"
data=read.table(datafilename,header=T)
#' ### Look at data summary, make sure it's formatted correctly
summary(data)
#' ## Data manipulation
#' Select only hippocampus head data
hipphead <- subset(data, ROI=="Hipp_Head")
hipphead$ROI <- factor(hipphead$ROI)
#' Create dummy variables for additive and conjunctive coding
hipphead$conjunctive <- recode(hipphead$Sort, "'bothdiff'=-1 ; 'consame'=-1 ; 'objconsame'=3 ; 'objsame'=-1"
, as.factor.result=FALSE, as.numeric.result=TRUE)
hipphead$additive <- recode(hipphead$Sort, "'bothdiff'=-1 ; 'consame'=0 ; 'objconsame'=1 ; 'objsame'=0",
, as.factor.result=FALSE, as.numeric.result=TRUE)
summary(hipphead)
#' ## Define models
#' ### Conjunctive coding model
model.conjunctive.hem <- function(x) {
lmer(Sim ~ conjunctive*Hem + (1|Subj/Hem), REML=FALSE, data=x)
}
#' ### Additive coding model
model.additive.hem <- function(x) {
lmer(Sim ~ additive*Hem + (1|Subj/Hem), REML=FALSE, data=x)
}
#' ## Define model comparison function
#' (Note: Lower AIC and BIC is better)
getbic <- function(x) {
compare <- anova(model.conjunctive.hem(x), model.additive.hem(x))
return(compare$BIC)
}
#' ### Start permutation test
#' ## Generate 10000 unique permutations of subjects with replacement
set.seed(1)
N <- t(replicate(15000, sample(levels(hipphead$Subj),replace=TRUE)))
sum(duplicated(N))
order <- N[!(duplicated(N)), ][1:niters, ]
head(order)
#' ## Initialize output
bics<-matrix(nrow=niters,ncol=2)
#' ## Loop through iterations to generate BIC distributions
for (i in 1:niters) {
#write(i,file="") # Verbose output - Turn off for notebook!
tempdata<-data.frame()
for (j in 1:dim(order)[2]) {
# Generate temporary data for iteration
tempdata <- rbind(tempdata, hipphead[hipphead$Subj==order[i,j],])
}
# Calculate BICs for temp data
bics[i,]<-getbic(tempdata)
}
bics<-as.data.frame(bics)
names(bics)<-c("bic.con","bic.add")
summary(bics)
#' ## Results
#' ### Plot BIC distribution for each model
bics.long <- reshape(bics, varying=c("bic.con","bic.add"), timevar="model", direction="long")
G <- ggplot() + geom_density(data=bics.long, aes(x=bic,y=..count..,fill=model, colour=model) ,alpha=0.5) +
ggtitle(paste(niters, " iterations", collapse=""))
G
#' ### Calculate the difference in BIC for each iteration
bic.diff <- bics$bic.con - bics$bic.add
summary(bic.diff)
#' ### Plot BIC difference distribution
Gdiff <- ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="green", colour="green", alpha=.5) +
ggtitle("BIC difference (con - add) across models (10,000 iterations)")
Gdiff
#' ### Calculate 95% confidence interval on BIC difference
bic.ci <- c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])
bic.ci <- as.data.frame(bic.ci)
row.names(bic.ci) <- c("lower","upper")
bic.ci
#' ### Calculate proportion of permutations with negative BIC difference
sum(bic.diff<0)/niters
G
install.packages("digest")
G
Gdiff
month()
month.abb
paste(1:10)
paste0(1:10)
paste0(1:10,'cat')
paste(1:10,'cat')
paste(1:10,'cat')
(nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))))
paste(month.abb, "is the", nth, "month of the year.")
paste(month.abb, letters)
niters
paste("this is a string",niters,"this is another string")
"BIC for con and add models (", niters, " iterations)"
paste0("BIC for con and add models (", niters, " iterations)", collapse="")
paste0("BIC for con and add models (", niters, " iterations)")
paste0("BIC difference (con - add) across models (",niters," iterations)")
bic.ci
sum(bic.diff<0)/niters
bic.ci <- as.data.frame(bic.ci)
which(recode)
which("recode")
?recode
?require
myfunction <- function(x) { x + 55320 }
?myfunction
myfunction
install.packages("titling")
system('kpsewhich titling.sty')
debugSource('~/GitHub/r-sweetness/bootstrap.bic/bootstrap.R')
debugSource('~/GitHub/r-sweetness/bootstrap.bic/bootstrap.R')
getbic
getbic(tempdata)
source('~/GitHub/r-sweetness/bootstrap.bic/bootstrap.R')
#' ---
#' title: "Model Fit Compare Bootstrap Analysis for CogCon fMRI Pattern Similarity Project"
#' author: "[Laura A Libby](lauraannelibby.github.io)"
#' date: "April 6, 2016"
#' output:
#'  html_document:
#'   toc: true
#'   toc_float: true
#' ---
#' This script compares additive (linear) versus conjunctive (threshold) coding models using Bayesian
#' Information  Criterion (BIC), determining whether model fit difference is reliable based on a
#' Bootstrap analysis.
#' ## Initialize settings
#' ### **Important:** Set number of iterations
niters=1000
#' ### Load packages
```
require(gtools)
require(ggplot2)
```
#' ### Input data
datafilename="C:/Users/Laura Libby/Dropbox/CogCon/meansim_ROIs_factors.txt"
data=read.table(datafilename,header=T)
#' ### Look at data summary, make sure it's formatted correctly
summary(data)
#' ## Data manipulation
#' Select only hippocampus head data
hipphead <- subset(data, ROI=="Hipp_Head")
hipphead$ROI <- factor(hipphead$ROI)
#' Create dummy variables for additive and conjunctive coding
``` {r message=FALSE, echo=FALSE}
require(car)
```
hipphead$conjunctive <- recode(hipphead$Sort, "'bothdiff'=-1 ; 'consame'=-1 ; 'objconsame'=3 ; 'objsame'=-1"
, as.factor.result=FALSE, as.numeric.result=TRUE)
hipphead$additive <- recode(hipphead$Sort, "'bothdiff'=-1 ; 'consame'=0 ; 'objconsame'=1 ; 'objsame'=0",
, as.factor.result=FALSE, as.numeric.result=TRUE)
summary(hipphead)
#' ## Define models
#' ### Conjunctive coding model
``` {r message=FALSE, echo=FALSE}
require(lme4)
```
model.conjunctive.hem <- function(x) {
lmer(Sim ~ conjunctive*Hem + (1|Subj/Hem), REML=FALSE, data=x)
}
#' ### Additive coding model
model.additive.hem <- function(x) {
lmer(Sim ~ additive*Hem + (1|Subj/Hem), REML=FALSE, data=x)
}
#' ## Define model comparison function
#' (Note: Lower AIC and BIC is better)
getbic <- function(x) {
compare <- anova(model.conjunctive.hem(x), model.additive.hem(x))
return(compare$BIC)
}
#' ### Start permutation test
#' ## Generate 10000 unique permutations of subjects with replacement
set.seed(1)
N <- t(replicate(15000, sample(levels(hipphead$Subj),replace=TRUE)))
sum(duplicated(N))
order <- N[!(duplicated(N)), ][1:niters, ]
head(order)
#' ## Initialize output
bics<-matrix(nrow=niters,ncol=2)
#' ## Loop through iterations to generate BIC distributions
for (i in 1:niters) {
#write(i,file="") # Verbose output - Turn off for notebook!
tempdata<-data.frame()
for (j in 1:dim(order)[2]) {
# Generate temporary data for iteration
tempdata <- rbind(tempdata, hipphead[hipphead$Subj==order[i,j],])
}
# Calculate BICs for temp data
bics[i,]<-getbic(tempdata)
}
i
testit()
suppressPackageStartupMessages(testit())
suppressMessages(testit())
mean()
sqrt(4)
suppressPackageStartupMessages()
suppressPackageStartupMessages(require(lmer))
suppressPackageStartupMessages(require(lme4))
require(lme4)
?require
require(lme4)
?require
?suppressMessages
system.time({summary(hipphead)})
#' ---
#' title: "Model Fit Compare Bootstrap Analysis for CogCon fMRI Pattern Similarity Project"
#' author: "[Laura A Libby](lauraannelibby.github.io)"
#' date: "April 6, 2016"
#' output:
#'  html_document:
#'   toc: true
#'   toc_float: true
#' ---
#' This script compares additive (linear) versus conjunctive (threshold) coding models using Bayesian
#' Information  Criterion (BIC), determining whether model fit difference is reliable based on a
#' Bootstrap analysis.
#' ## Initialize settings
#' ### **Important:** Set number of iterations
niters=10
#' ### Load packages
suppressMessages(require(car))
suppressMessages(require(gtools))
suppressMessages(require(ggplot2))
suppressMessages(require(lme4)
#' ### Input data
datafilename="C:/Users/Laura Libby/Dropbox/CogCon/meansim_ROIs_factors.txt"
data=read.table(datafilename,header=T)
#' ### Look at data summary, make sure it's formatted correctly
summary(data)
#' ## Data manipulation
#' Select only hippocampus head data
hipphead <- subset(data, ROI=="Hipp_Head")
hipphead$ROI <- factor(hipphead$ROI)
#' Create dummy variables for additive and conjunctive coding
hipphead$conjunctive <- recode(hipphead$Sort, "'bothdiff'=-1 ; 'consame'=-1 ; 'objconsame'=3 ; 'objsame'=-1"
, as.factor.result=FALSE, as.numeric.result=TRUE)
hipphead$additive <- recode(hipphead$Sort, "'bothdiff'=-1 ; 'consame'=0 ; 'objconsame'=1 ; 'objsame'=0",
, as.factor.result=FALSE, as.numeric.result=TRUE)
summary(hipphead)
#' ## Define models
#' ### Conjunctive coding model
model.conjunctive.hem <- function(x) {
lmer(Sim ~ conjunctive*Hem + (1|Subj/Hem), REML=FALSE, data=x)
}
#' ### Additive coding model
model.additive.hem <- function(x) {
lmer(Sim ~ additive*Hem + (1|Subj/Hem), REML=FALSE, data=x)
}
#' ## Define model comparison function
#' (Note: Lower AIC and BIC is better)
getbic <- function(x) {
compare <- anova(model.conjunctive.hem(x), model.additive.hem(x))
return(compare$BIC)
}
#' ### Start permutation test
#' ## Generate 10000 unique permutations of subjects with replacement
set.seed(1)
N <- t(replicate(15000, sample(levels(hipphead$Subj),replace=TRUE)))
sum(duplicated(N))
order <- N[!(duplicated(N)), ][1:niters, ]
head(order)
#' ## Initialize output
bics<-matrix(nrow=niters,ncol=2)
#' ## Loop through iterations to generate BIC distributions
tictoc <- system.time({
for (i in 1:niters) {
#write(i,file="") # Verbose output - Turn off for notebook!
tempdata<-data.frame()
for (j in 1:dim(order)[2]) {
# Generate temporary data for iteration
tempdata <- rbind(tempdata, hipphead[hipphead$Subj==order[i,j],])
}
# Calculate BICs for temp data
bics[i,]<-getbic(tempdata)
}
})
tictoc
bics<-as.data.frame(bics)
names(bics)<-c("bic.con","bic.add")
summary(bics)
#' ## Results
#' ### Plot BIC distribution for each model
bics.long <- reshape(bics, varying=c("bic.con","bic.add"), timevar="model", direction="long")
G <- ggplot() + geom_density(data=bics.long, aes(x=bic,y=..count..,fill=model, colour=model) ,alpha=0.5) +
ggtitle(paste0("BIC for con and add models (", niters, " iterations)"))
G
#' ### Calculate the difference in BIC for each iteration
bic.diff <- bics$bic.con - bics$bic.add
summary(bic.diff)
#' ### Plot BIC difference distribution
Gdiff <- ggplot() + geom_density(aes(x=bic.diff, y=..count..), fill="green", colour="green", alpha=.5) +
ggtitle(paste0("BIC difference (con - add) across models (",niters," iterations)"))
Gdiff
#' ### Calculate 95% confidence interval on BIC difference
bic.ci <- c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])
bic.ci <- as.data.frame(bic.ci)
row.names(bic.ci) <- c("lower","upper")
bic.ci
#' ### Calculate proportion of permutations with negative BIC difference
sum(bic.diff<0)/niters
tictoc
?tictoc
whos(tictoc)
type(tictoc)
?system.time
summary(tictoc)
tictoc.elapsed
tictoc$elapsed
tictoc <- as.data.frame(tictoc)
typeof(tictoc)
tictoc
tictoc-3
tictoc[3]
hi <- tictoc[3]
hi
hi <- tictoc[2,3]
size(tictoc)
length(tictoc)
nrow(tictoc)
ncol(tictoc)
tictoc[3][2]
tictoc[3][1]
bic.ci
c(sort(bic.diff)[niters*.025],sort(bic.diff)[niters*.975])
tictoc
summary(bics)
niters
niters*0.25
niters*0.025
round(niters*0.025)
round(niters*0.975)
round(1000*0.025)
round(10328*0.025)
round(200*0.025)
round(150*0.025)
round(100*0.025)
100*0.025
200*0.025
round(20*0.025)
round(50*0.025)
install.packages(c("boot", "car", "evaluate", "ez", "formatR", "Formula", "gridExtra", "highr", "Hmisc", "htmltools", "installr", "knitr", "latticeExtra", "lme4", "manipulate", "mime", "pbkrtest", "quantreg", "RcppEigen", "rmarkdown", "SparseM"))
